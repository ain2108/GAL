type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LSQBRACE
  | RSQBRACE
  | LBRACE
  | RBRACE
  | BAR
  | COLON
  | LISTSEP
  | COMMA
  | EPLUS
  | EMINUS
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | INT
  | STRING
  | EDGE
  | SLISTT
  | NLISTT
  | ELISTT
  | ILISTT
  | DEFINE
  | WHILE
  | LITINT of (int)
  | ID of (string)
  | LITSTR of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(*  Authors: Donovan Chan, Andrew Feather, Macrina Lobo, 
			Anton Nefedenkov
   	Note: This code was writte on top of Prof. Edwards's 
   		 microc code. We hope this is acceptable. *)
    open Ast
    open Help

    let build_edge ~src (weight, dst) = 
    	Edgedcl(src, weight, dst)
# 59 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LSQBRACE *);
  261 (* RSQBRACE *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* BAR *);
  265 (* COLON *);
  266 (* LISTSEP *);
  267 (* COMMA *);
  268 (* EPLUS *);
  269 (* EMINUS *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* TIMES *);
  273 (* DIVIDE *);
  274 (* ASSIGN *);
  275 (* NOT *);
  276 (* EQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* INT *);
  288 (* STRING *);
  289 (* EDGE *);
  290 (* SLISTT *);
  291 (* NLISTT *);
  292 (* ELISTT *);
  293 (* ILISTT *);
  294 (* DEFINE *);
  295 (* WHILE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  296 (* LITINT *);
  297 (* ID *);
  298 (* LITSTR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\004\000\006\000\006\000\
\008\000\008\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\007\000\007\000\010\000\010\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\013\000\013\000\014\000\014\000\
\015\000\016\000\016\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\012\000\012\000\017\000\017\000\018\000\018\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\003\000\008\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\002\000\000\000\002\000\003\000\002\000\003\000\
\003\000\007\000\009\000\005\000\000\000\001\000\001\000\003\000\
\003\000\003\000\005\000\003\000\001\000\001\000\001\000\007\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\004\000\000\000\001\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\065\000\000\000\011\000\012\000\014\000\013\000\
\015\000\016\000\017\000\001\000\003\000\004\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\018\000\000\000\000\000\010\000\000\000\000\000\020\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\039\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\041\000\000\000\025\000\021\000\000\000\000\000\
\036\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\044\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\058\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\026\000\000\000\035\000\
\000\000\027\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\042\000\020\000\027\000\021\000\
\043\000\049\000\044\000\085\000\047\000\048\000\051\000\107\000\
\088\000\089\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\236\254\022\255\
\000\000\248\255\240\254\047\255\040\255\000\000\062\255\248\255\
\000\000\028\255\087\255\000\000\014\255\014\255\000\000\000\000\
\014\255\014\255\014\255\068\255\069\255\070\255\000\000\002\255\
\000\000\033\255\000\000\252\255\011\001\141\001\072\255\065\255\
\128\255\078\001\071\255\000\000\105\000\014\255\014\255\014\255\
\014\255\014\255\077\255\000\000\014\255\014\255\014\255\014\255\
\014\255\014\255\014\255\014\255\014\255\014\255\014\255\014\255\
\014\255\000\000\000\000\014\255\000\000\000\000\014\255\014\255\
\000\000\000\000\026\001\141\001\083\255\041\001\141\001\082\255\
\079\255\141\001\000\000\031\255\031\255\031\255\031\255\000\000\
\000\000\156\001\149\000\149\000\149\000\149\000\170\255\129\255\
\141\001\094\001\000\000\110\001\169\255\014\255\169\255\000\000\
\014\255\014\255\014\255\063\255\122\000\000\000\141\001\126\001\
\060\001\169\255\014\255\014\255\000\000\000\000\095\255\000\000\
\169\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\255\000\000\000\000\098\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\100\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\255\
\000\000\000\000\000\000\000\000\000\000\000\255\000\000\106\255\
\000\000\000\000\000\000\000\000\000\000\000\000\102\255\000\000\
\109\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\255\000\000\000\000\006\255\000\000\
\110\255\007\001\000\000\237\255\038\000\064\000\090\000\000\000\
\000\000\056\255\148\000\174\000\200\000\226\000\252\000\099\255\
\053\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\255\108\255\
\000\000\000\000\130\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\207\255\000\000\229\255\014\000\000\000\000\000\000\000\007\000\
\000\000\000\000"

let yytablesize = 692
let yytable = "\078\000\
\012\000\045\000\046\000\057\000\031\000\050\000\052\000\053\000\
\063\000\031\000\064\000\015\000\060\000\001\000\060\000\029\000\
\063\000\030\000\064\000\058\000\016\000\033\000\017\000\018\000\
\022\000\019\000\083\000\084\000\086\000\087\000\090\000\026\000\
\034\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\065\000\066\000\
\105\000\023\000\024\000\106\000\108\000\039\000\040\000\041\000\
\048\000\032\000\048\000\116\000\048\000\118\000\032\000\048\000\
\048\000\048\000\048\000\025\000\028\000\054\000\055\000\056\000\
\126\000\059\000\076\000\048\000\075\000\091\000\081\000\130\000\
\048\000\048\000\117\000\110\000\112\000\119\000\120\000\121\000\
\029\000\113\000\030\000\122\000\031\000\032\000\033\000\084\000\
\106\000\129\000\007\000\054\000\008\000\054\000\059\000\054\000\
\029\000\034\000\054\000\054\000\054\000\054\000\030\000\061\000\
\062\000\035\000\036\000\034\000\037\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\054\000\038\000\039\000\040\000\
\041\000\029\000\128\000\030\000\059\000\031\000\077\000\033\000\
\127\000\000\000\000\000\000\000\061\000\062\000\063\000\064\000\
\065\000\066\000\034\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\035\000\036\000\000\000\037\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\038\000\039\000\
\040\000\041\000\029\000\000\000\030\000\000\000\031\000\000\000\
\033\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\034\000\000\000\067\000\068\000\069\000\
\070\000\071\000\000\000\035\000\036\000\000\000\037\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\038\000\
\039\000\040\000\041\000\038\000\000\000\038\000\000\000\038\000\
\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\046\000\000\000\046\000\
\000\000\046\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\060\000\000\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\047\000\000\000\
\047\000\000\000\047\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\042\000\000\000\042\000\000\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\043\000\000\000\043\000\000\000\043\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\082\000\000\000\000\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\061\000\062\000\063\000\064\000\
\065\000\066\000\123\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\049\000\000\000\049\000\000\000\
\049\000\000\000\000\000\049\000\049\000\049\000\049\000\000\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\050\000\000\000\
\050\000\000\000\050\000\000\000\000\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\051\000\000\000\051\000\000\000\051\000\000\000\000\000\051\000\
\051\000\051\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\052\000\000\000\052\000\000\000\052\000\000\000\
\000\000\052\000\052\000\052\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\053\000\000\000\053\000\000\000\
\053\000\000\000\000\000\053\000\053\000\053\000\053\000\056\000\
\000\000\056\000\000\000\056\000\000\000\074\000\056\000\056\000\
\056\000\056\000\000\000\000\000\053\000\053\000\061\000\062\000\
\063\000\064\000\065\000\066\000\109\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\061\000\062\000\063\000\
\064\000\065\000\066\000\111\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\125\000\000\000\000\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\079\000\000\000\
\080\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\114\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\115\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\124\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\068\000\069\000\070\000\071\000"

let yycheck = "\049\000\
\000\000\029\000\030\000\002\001\005\001\033\000\034\000\035\000\
\003\001\010\001\003\001\004\000\001\001\001\000\003\001\002\001\
\011\001\004\001\011\001\018\001\041\001\008\001\001\001\002\001\
\041\001\018\000\054\000\055\000\056\000\057\000\058\000\024\000\
\019\001\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\016\001\017\001\
\076\000\003\001\011\001\079\000\080\000\040\001\041\001\042\001\
\001\001\005\001\003\001\109\000\005\001\111\000\010\001\008\001\
\009\001\010\001\011\001\006\001\041\001\002\001\002\001\002\001\
\122\000\041\001\010\001\020\001\005\001\001\001\008\001\129\000\
\025\001\026\001\110\000\001\001\003\001\113\000\114\000\115\000\
\002\001\011\001\004\001\029\001\006\001\007\001\008\001\123\000\
\124\000\003\001\003\001\001\001\003\001\003\001\001\001\005\001\
\005\001\019\001\008\001\009\001\010\001\011\001\005\001\003\001\
\003\001\027\001\028\001\008\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\026\001\039\001\040\001\041\001\
\042\001\002\001\124\000\004\001\003\001\006\001\007\001\008\001\
\123\000\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\019\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\027\001\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\002\001\255\255\004\001\255\255\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\019\001\255\255\020\001\021\001\022\001\
\023\001\024\001\255\255\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\003\001\
\255\255\005\001\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\001\001\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\255\255\003\001\255\255\005\001\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\001\001\255\255\003\001\255\255\005\001\255\255\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\001\001\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\012\001\013\001\014\001\015\001\
\016\001\017\001\001\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\008\001\009\001\010\001\011\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\255\255\003\001\255\255\005\001\255\255\255\255\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\001\001\255\255\003\001\255\255\005\001\255\255\
\255\255\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\008\001\009\001\010\001\011\001\001\001\
\255\255\003\001\255\255\005\001\255\255\003\001\008\001\009\001\
\010\001\011\001\255\255\255\255\025\001\026\001\012\001\013\001\
\014\001\015\001\016\001\017\001\003\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\012\001\013\001\014\001\
\015\001\016\001\017\001\003\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\008\001\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LSQBRACE\000\
  RSQBRACE\000\
  LBRACE\000\
  RBRACE\000\
  BAR\000\
  COLON\000\
  LISTSEP\000\
  COMMA\000\
  EPLUS\000\
  EMINUS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  INT\000\
  STRING\000\
  EDGE\000\
  SLISTT\000\
  NLISTT\000\
  ELISTT\000\
  ILISTT\000\
  DEFINE\000\
  WHILE\000\
  EOF\000\
  "

let yynames_block = "\
  LITINT\000\
  ID\000\
  LITSTR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 37 "parser.mly"
                   ( _1 )
# 433 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
                    ([],[])
# 439 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 40 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 447 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 41 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 455 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 43 "parser.mly"
                   ( (_1, _2) )
# 463 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opts) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'func_body) in
    Obj.repr(
# 47 "parser.mly"
 ({ typ = _1; fname = _2; formals = _4; 
		locals = Help.get_vardecls [] _7; 
		body = _7 })
# 475 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                  ( [] )
# 481 "parser.ml"
               : 'formals_opts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 53 "parser.mly"
                  ( List.rev _1 )
# 488 "parser.ml"
               : 'formals_opts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                      ( [(_1,_2)] )
# 496 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                             ( (_3,_4) :: _1 )
# 505 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
         ( Int 		)
# 511 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
           ( String 	)
# 517 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
           ( SListtyp 	)
# 523 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
          ( Edge 		)
# 529 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
           ( NListtyp 	)
# 535 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
           ( EListtyp 	)
# 541 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
           ( IListtyp 	)
# 547 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
               ( [] )
# 553 "parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_body) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 69 "parser.mly"
                     ( _2 :: _1 )
# 561 "parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                      ( [] )
# 567 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                   ( _2 :: _1 )
# 575 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 78 "parser.mly"
                     ( Localdecl(_1, _2))
# 583 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                       ( Expr _1 )
# 590 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                          ( Return _2  )
# 597 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 81 "parser.mly"
                               ( Block(List.rev _2) )
# 604 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                         ( If(_3, _5, _7) )
# 613 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
           ( For(_3,_5,_7,_9) )
# 623 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                      ( While(_3, _5) )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                       ( [] )
# 637 "parser.ml"
               : 'list_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listdecl) in
    Obj.repr(
# 89 "parser.mly"
            ( List.rev _1 )
# 644 "parser.ml"
               : 'list_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
             ( [_1] )
# 651 "parser.ml"
               : 'listdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'listdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                         ( _3 :: _1 )
# 659 "parser.ml"
               : 'listdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'w_dst_list) in
    Obj.repr(
# 96 "parser.mly"
                         ( List.map (build_edge ~src:_1) _3)
# 667 "parser.ml"
               : 'node_syntax))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ([(_1, _3)])
# 675 "parser.ml"
               : 'w_dst_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'w_dst_list) in
    Obj.repr(
# 100 "parser.mly"
                                    ((_1, _3)::_5)
# 684 "parser.ml"
               : 'w_dst_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'node_syntax) in
    Obj.repr(
# 104 "parser.mly"
                          (Listdcl(_2))
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 105 "parser.mly"
               ( Litint(_1) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
         ( Id(_1) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
            ( Litstr(_1) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                                       ( Edgedcl(_2,_4,_6) )
# 721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_list) in
    Obj.repr(
# 109 "parser.mly"
                                  ( Listdcl(_2) )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                    ( Binop(_1, Add,   _3) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                       ( Binop(_1, Sub,   _3) )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                       ( Binop(_1, Div,   _3) )
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( Binop(_1, Eadd,  _3) )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                       ( Binop(_1, Esub,  _3) )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                       ( Binop(_1, Equal, _3) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                       ( Binop(_1, Less,  _3) )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       ( Binop(_1, Leq,   _3) )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                       ( Binop(_1, Greater, _3) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                       ( Binop(_1, Geq,   _3) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                       ( Binop(_1, And,   _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                       ( Binop(_1, Or,    _3) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                       ( Unop(Not, _2) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                       ( Assign(_1, _3) )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                         ( _2 )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 126 "parser.mly"
                                    ( Call(_1, _3))
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                      ( Noexpr )
# 868 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
             ( _1 )
# 875 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                         ( [] )
# 881 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 132 "parser.mly"
                ( List.rev _1 )
# 888 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                 ( [_1] )
# 895 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                           ( _3 :: _1 )
# 903 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
