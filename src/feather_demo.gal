slist dijkstra(nlist l1){
    
    slist path;
    path = ["A"];

    

    int len;
    len = nlength(l1);
    nlist tmp;
    tmp = l1;
    int i;
    i = 0;
    elist temp_edge;
    
    int edge_i;
    elist edge_tmp;
    int edge_len;

    print_str("->");

    ilist visited_set;

    visited_set = [0];
    
    while (i < len) {
        
        temp_edge = npeek(tmp);
        
        edge_len = elength(temp_edge);
        edge_tmp = temp_edge;
        
        edge_i = 0;
        print_str("->");

        visited_set = iadd(i,visited_set);
        
        while (edge_i < edge_len) {
              print_edge(epeek(edge_tmp));
              print_str("::");
              edge_tmp = enext(edge_tmp);
              
              edge_i = edge_i + 1;
        }
        print_endline();
        

        tmp = nnext(tmp);
        i = i + 1;
    }

    print_ilist(visited_set);


    return path;
}

int main(){
	
	print_endline();

	/* Declare our nodes above */ 
	node n1;
    n1 = |"A": 2, "B", 11, "C", 4, "D", 14, "E"|; 
    node n2;
    n2 = |"B": 7, "C", 3, "A", 20, "D"|;
    node n3; 
    n3 = |"C": 5, "D", 5, "A", 16, "E"|; 
    node n4;
    n4 = |"D": 20, "A", 7, "B"|; 

    print_line("Lets print them to see what we got:");
    print_elist(n1);
    print_elist(n2);
    print_elist(n3);
    print_elist(n4);

    print_endline();
    print_endline();

    /* Lets declare another node. But using diffrent syntax */ 
    elist n5;
    n5 = [|"E", 24, "D"|::|"E", 13, "B"|];

    print_line("We can also print them as a graph:"); 
    nlist graph;
    graph = [n1::n2::n3::n4::n5];  

    /* We can use a different function to print this graph */ 
    dijkstra(graph);
    print_endline();


}