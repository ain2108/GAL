def int print_list(list l1){
    int len;
    len = length(l1);
    list tmp;
    tmp = l1;
    int i;
    i = 0;
    print_str("->");
    while (i < len) {
    	  print_str(peek(tmp));
    	  print_str("::");
    	  tmp = next(tmp);
    	  i = i + 1;
    }
    print_endline();

    return 1;
}


def int sum(int a, int b){
    return a + b;
}

def int print_edge(edge e){
    print_str("(");
    print_str(source(e));
    print_str(", ");
    print_int(weight(e));
    print_str(", ");
    print_str(dest(e));
    print_str(")");
    print_endline();
    return 0;
}

def int print_ln(string str){
    print_str(str);
    print_endline();
    return 0;
}

def edge build_edge(string src, int w, string dst){
    edge e1;
    e1 = | src, w, dst|;
    return e1;
}

def int main(){
    edge e1;
    e1 = |"A", 2, "B"|;
    string hello;
    hello = "goodbye";

    list l1;
    l1 = ["A"::"B"::"C"];

    list l2;
    l2 = ["A"];

    edge e2;
    e2 = |"AlphaAlphaAlpha", 3, "C"|;

    print_edge(e1);
    e2 = build_edge("alph", 10, "banana");
    print_edge(e2);

    print_str(peek(l1));
    l1 = pop(l1);
    print_str("::");
    print_str(peek(l1));
    l1 = pop(l1);
    print_str("::");
    print_str(peek(l1));

    list l3;
    l3 = ["Lebesque"::"Banana"::"Pretzel"::"A"::"B"::"C"];

    int abra;
    abra = 20;
    print_endline();
    print_int(length(l3));
    print_endline();
    print_int((!(weight(e2))));
    print_endline();

    int baracuda;
    baracuda = 0;
    int cadabra;
    if (0 == 1) {
       print_ln("true");
       baracuda = 3;
    }else{
       print_ln("false");
       cadabra = 30;
       while(cadabra > 0){
	print_int(abra);
	print_str(" ");
	cadabra = cadabra - 10; 
       }
    }
    print_endline();
    print_list(l3);
    print_int(cadabra);


    list lemma;
    lemma = []; 
    lemma = ["A"::"B"];
    print_list(lemma);


    print_endline();
    print_endline();
/*    print_str("for donovan:)");
    print_endline();

    node n1;
    n1 = |"A", 2, "B", 11, "C", 2, "D"|;

    print_list(n1);
*/

    return 1;
}
